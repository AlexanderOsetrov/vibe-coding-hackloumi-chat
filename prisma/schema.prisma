generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  username            String              @unique
  password            String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  receivedInvitations ContactInvitation[] @relation("InvitationReceiver")
  sentInvitations     ContactInvitation[] @relation("InvitationSender")
  contactsReceived    Contact[]           @relation("ContactUser")
  contactsOwned       Contact[]           @relation("ContactOwner")
  groupMemberships    GroupMember[]
  ownedGroups         Group[]             @relation("GroupOwner")
  receivedMessages    Message[]           @relation("MessageReceiver")
  sentMessages        Message[]           @relation("MessageSender")

  @@map("users")
}

model Message {
  id            String                   @id @default(cuid())
  content       String
  fts           Unsupported("tsvector")?
  createdAt     DateTime                 @default(now())
  senderId      String
  receiverId    String?
  deliveredAt   DateTime?
  status        MessageStatus            @default(SENT)
  groupId       String?
  imageFilename String?
  imageMimeType String?
  imageSize     Int?
  imageUrl      String?
  group         Group?                   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  receiver      User?                    @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender        User                     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId, createdAt])
  @@index([receiverId, senderId, createdAt])
  @@index([groupId, createdAt])
  @@index([fts], type: Gin)
  @@index([status])
  @@map("messages")
}

model Contact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  ownerId   String
  contactId String
  contact   User     @relation("ContactUser", fields: [contactId], references: [id], onDelete: Cascade)
  owner     User     @relation("ContactOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([ownerId, contactId])
  @@index([ownerId])
  @@index([contactId])
  @@map("contacts")
}

model ContactInvitation {
  id         String                  @id @default(cuid())
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  senderId   String
  receiverId String
  status     ContactInvitationStatus @default(PENDING)
  receiver   User                    @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User                    @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([receiverId, status])
  @@index([senderId, status])
  @@map("contact_invitations")
}

model Group {
  id        String        @id @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  ownerId   String
  members   GroupMember[]
  owner     User          @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([ownerId])
  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  joinedAt DateTime @default(now())
  userId   String
  groupId  String
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([groupId])
  @@index([userId])
  @@map("group_members")
}

enum ContactInvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessageStatus {
  SENT
  DELIVERED
}
