// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String   // Argon2 hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Messages sent by this user
  sentMessages     Message[] @relation("MessageSender")
  // Messages received by this user
  receivedMessages Message[] @relation("MessageReceiver")

  // Contacts where this user is the owner
  contactsOwned    Contact[] @relation("ContactOwner")
  // Contacts where this user is the contact
  contactsReceived Contact[] @relation("ContactUser")

  // Contact invitations sent by this user
  sentInvitations     ContactInvitation[] @relation("InvitationSender")
  // Contact invitations received by this user
  receivedInvitations ContactInvitation[] @relation("InvitationReceiver")

  @@map("users")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  fts       Unsupported("tsvector")?  // Full-text search vector
  status    MessageStatus @default(SENT)  // Delivery status
  createdAt DateTime @default(now())
  deliveredAt DateTime?  // When message was delivered to recipient

  // Sender of the message
  senderId String
  sender   User   @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  // Receiver of the message
  receiverId String
  receiver   User   @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@index([senderId, receiverId, createdAt])
  @@index([receiverId, senderId, createdAt])
  @@index([fts], map: "messages_fts_idx", type: Gin)
  @@index([status])
}

model Contact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // The user who owns this contact relationship
  ownerId String
  owner   User   @relation("ContactOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // The user who is the contact
  contactId String
  contact   User   @relation("ContactUser", fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([ownerId, contactId])
  @@map("contacts")
  @@index([ownerId])
  @@index([contactId])
}

model ContactInvitation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // The user who sent the invitation
  senderId String
  sender   User   @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)

  // The user who received the invitation
  receiverId String
  receiver   User   @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  // Status of the invitation
  status ContactInvitationStatus @default(PENDING)

  @@unique([senderId, receiverId])
  @@map("contact_invitations")
  @@index([receiverId, status])
  @@index([senderId, status])
}

enum ContactInvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessageStatus {
  SENT      // Message sent to server
  DELIVERED // Message delivered to recipient
}
